<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-06-22T09:55:07-06:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">My Coding Journey Blog</title><author><name>Patt Sookmark</name></author><entry><title type="html">Building a Thai Word Game: Implementing the Repository Pattern and Container/Presentation Pattern</title><link href="http://localhost:4000/2023/06/08/Thaiwordgame-pattern.html" rel="alternate" type="text/html" title="Building a Thai Word Game: Implementing the Repository Pattern and Container/Presentation Pattern" /><published>2023-06-08T00:00:00-06:00</published><updated>2023-06-08T00:00:00-06:00</updated><id>http://localhost:4000/2023/06/08/Thaiwordgame-pattern</id><content type="html" xml:base="http://localhost:4000/2023/06/08/Thaiwordgame-pattern.html"><![CDATA[<p><img class="blog-banner" src="/asset/blog-patterns.png" alt="blog-patterns" />
In this blog post, we will explore two essential architectural patterns used in the development of the Thai Word Game: the Repository Pattern and the Container/Presentation Pattern. These patterns provide structure, organization, and maintainability to our project, enabling us to separate concerns and promote code reuse. By implementing these patterns, we can create a scalable and maintainable application with clear separation between data access, logic, and user interface components.</p>

<h3 id="understanding-the-repository-pattern">Understanding the Repository Pattern:</h3>

<p>The Repository Pattern is a design pattern that provides an abstraction layer between the application and the data layer. It helps in managing data access and provides a consistent interface for interacting with data regardless of the underlying data structure. This is how I implemented a Word Data Repository using TypeScript and async/await:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// types/WordData.ts
interface WordData {
  id: number;
  img_url: string;
  audio_url: string;
  word: string;
  categories: string;
}

export default WordData;

</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// repositories/WordDataRepository.ts
import { getAllWords } from "../apiCall/apiCall";
import WordData from "../types/WordData";

class WordDataRepository {
  public async getAll(): Promise&lt;WordData[]&gt; {
    try {
      const data = await getAllWords();
      return data;
    } catch (error) {
      throw new Error("Failed to fetch word data.");
    }
  }
}

export default WordDataRepository;

</code></pre></div></div>

<p>In the above example, we define the <code class="language-plaintext highlighter-rouge">WordData</code> interface in the <code class="language-plaintext highlighter-rouge">types/WordData.ts</code> file. This interface represents the structure of a single word data object.</p>

<p>The <code class="language-plaintext highlighter-rouge">WordDataRepository</code> class in the <code class="language-plaintext highlighter-rouge">repositories/WordDataRepository.ts</code> file encapsulates the logic for fetching word data. The <code class="language-plaintext highlighter-rouge">getAll</code> method makes an async call to the <code class="language-plaintext highlighter-rouge">getAllWords</code> function from the <code class="language-plaintext highlighter-rouge">apiCall</code> module. It handles the asynchronous nature of the operation using the <code class="language-plaintext highlighter-rouge">async/await</code> syntax and returns a promise that resolves to an array of <code class="language-plaintext highlighter-rouge">WordData</code> objects.</p>

<h4 id="testing-worddatarepository">Testing WordDataRepository</h4>

<p>To test the repository layer, you can create mock data or use a test-specific data source. By mocking the data, you can simulate different scenarios and verify that the repository behaves as expected. Here’s an example of a unit test for the <code class="language-plaintext highlighter-rouge">getAll</code> method:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import WordDataRepository from "../repositories/WordDataRepository";

describe("WordDataRepository", () =&gt; {
  it("should fetch all word data", async () =&gt; {
    // Mock the data retrieval function
    const mockGetAllWords = jest.fn().mockResolvedValue([
      {
        id: 1,
        img_url: "example.com/image1.jpg",
        audio_url: "example.com/audio1.mp3",
        word: "Hello",
        categories: "Greeting",
      },
      {
        id: 2,
        img_url: "example.com/image2.jpg",
        audio_url: "example.com/audio2.mp3",
        word: "Food",
        categories: "Category1",
      },
    ]);

    // Create an instance of the repository with the mock function
    const wordDataRepository = new WordDataRepository(mockGetAllWords);

    // Call the getAll method
    const result = await wordDataRepository.getAll();

    // Assert that the mock function was called and returned the expected data
    expect(mockGetAllWords).toHaveBeenCalled();
    expect(result).toHaveLength(2);
    expect(result[0].word).toBe("Hello");
    expect(result[1].categories).toBe("Category1");
  });
});

</code></pre></div></div>

<p>In this test example, we use Jest as the testing framework. We create a mock function <code class="language-plaintext highlighter-rouge">mockGetAllWords</code> that returns a predefined array of word data objects. We then instantiate the <code class="language-plaintext highlighter-rouge">WordDataRepository</code> with this mock function and call the <code class="language-plaintext highlighter-rouge">getAll</code> method. Finally, we assert that the mock function was called and that the returned data matches our expectations.</p>

<p>By testing the repository layer and mocking data, we can ensure that the data access logic is functioning correctly and independently from the actual data source.</p>

<h4 id="benefit-of-using-repository-pattern">Benefit of using Repository Pattern</h4>

<ul>
  <li>Separation of concerns: The repository encapsulates the data access logic, allowing the rest of the application to focus on business logic.</li>
  <li>Testability: The repository can be easily tested by mocking the data access layer, ensuring reliable and isolated unit tests.</li>
</ul>

<h3 id="understanding-the-containerpresentation-pattern">Understanding The Container/Presentation Pattern:</h3>

<p>The Container/Presentation Pattern, also known as the Smart vs. Dumb components or the Container vs. Presentational components, is a pattern that separates the concerns of data management and UI rendering in a component-based architecture. Container components (smart components) handle the logic, data fetching, and state management, while presentation components (dumb components) focus on rendering the UI based on the provided props.</p>

<h4 id="container-components">Container components:</h4>

<ul>
  <li>Manage the state and data fetching.</li>
  <li>Implement callbacks and event handling.</li>
  <li>Pass down data and callbacks as props to the presentation components.</li>
  <li>Should have minimal or no UI rendering logic.
####Presentation components:</li>
  <li>Receive data and callbacks as props.</li>
  <li>Render the UI based on the provided props.</li>
  <li>Should be reusable and agnostic of the data source or state management.</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// containers/WordBtnContainer.tsx
import { useState, useEffect } from "react";
import { WordData } from "../types";
import { getWordById } from "../apiCall/apiCall";
import WordBtn from "../components/WordBtn";

interface WordBtnContainerProps {
  id: number;
}

const WordBtnContainer: React.FC&lt;WordBtnContainerProps&gt; = ({ id }) =&gt; {
  const [wordData, setWordData] = useState&lt;WordData | null&gt;(null);

  useEffect(() =&gt; {
    const fetchWordData = async () =&gt; {
      try {
        const data = await getWordById(id);
        setWordData(data);
      } catch (error) {
        // Handle error
      }
    };

    fetchWordData();
  }, [id]);

  return &lt;WordBtn wordData={wordData} /&gt;;
};

export default WordBtnContainer;

</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// components/WordBtn.tsx
import React from "react";
import { WordData } from "../types";

interface WordBtnProps {
  wordData: WordData | null;
}

const WordBtn: React.FC&lt;WordBtnProps&gt; = ({ wordData }) =&gt; {
  if (!wordData) {
    return &lt;div&gt;Loading...&lt;/div&gt;;
  }

  return (
    &lt;div&gt;
      &lt;img src={wordData.img_url} alt={wordData.word} /&gt;
      &lt;span&gt;{wordData.word}&lt;/span&gt;
    &lt;/div&gt;
  );
};

export default WordBtn;

</code></pre></div></div>

<p>In this code, we have separated the logic and rendering concerns. The <code class="language-plaintext highlighter-rouge">WordBtnContainer</code> is responsible for fetching the word data and managing the state using <code class="language-plaintext highlighter-rouge">useState</code> and <code class="language-plaintext highlighter-rouge">useEffect</code> hooks. It passes the fetched <code class="language-plaintext highlighter-rouge">wordData</code> as a prop to the <code class="language-plaintext highlighter-rouge">WordBtn</code> presentation component.</p>

<p>The <code class="language-plaintext highlighter-rouge">WordBtn</code> component receives the <code class="language-plaintext highlighter-rouge">wordData</code> prop and renders the UI based on the provided data. It handles the case when the data is still loading by displaying a loading message.</p>

<h4 id="benefit-of-using-containerpresentation-pattern">Benefit of using Container/Presentation Pattern</h4>

<ul>
  <li>Separation of concerns: The Container/Presentation Pattern allows you to separate the data management logic from the UI rendering, making the code more maintainable and testable.</li>
  <li>Reusability: Presentation components can be easily reused across multiple container components or in different parts of the application since they are agnostic of the data source or state management.</li>
  <li>Testing components in isolation:
With the Container/Presentation Pattern, you can test the container and presentation components independently.
    <ul>
      <li>Container components: You can write unit tests to verify the logic, data fetching, and state management. Mock the dependencies and test the expected behavior when props or state change.</li>
      <li>Presentation components: Since presentation components focus solely on rendering UI based on props, you can write snapshot tests or component render tests to verify the rendered output for different scenarios.</li>
      <li>By testing components in isolation, you ensure that each component behaves correctly and can be easily maintained or modified without affecting other parts of the application.</li>
    </ul>
  </li>
</ul>

<p>Following the Container/Presentation Pattern brings clear separation of concerns, improves code organization, and promotes reusability. It also allows for easier testing and maintenance of the components.</p>

<p>Here’s an example directory structure that incorporates the Repository Pattern and Container/Presentation Pattern:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>├── src
│   ├── apiCall
│   │   └── apiCall.ts            # API call functions
│   ├── components
│   │   ├── containers            # Container components
│   │   │   ├── NavBarContainer.tsx
│   │   │   └── WordBtnContainer.tsx
│   │   └── presentation          # Presentation components
│   │       ├── NavBar.tsx
│   │       └── WordBtn.tsx
│   ├── repository
│   │   └── wordRepo.ts           # WordDataRepository class
│   ├── types
│   │   └── WordData.ts           # Type definition for WordData
│   ├── App.tsx                   # Main application component
│   ├── index.tsx                 # Entry point of the application
│   └── ...                       # Other application files and folders
├── public
│   ├── index.html                # HTML template
│   └── ...                       # Other static files
├── package.json                  # Project dependencies and scripts
├── tsconfig.json                 # TypeScript configuration
└── ...                           # Other configuration files
</code></pre></div></div>

<p>Explanation:</p>

<ul>
  <li>The <code class="language-plaintext highlighter-rouge">src</code> folder contains the main source code of your application.</li>
  <li>The <code class="language-plaintext highlighter-rouge">apiCall</code> folder holds the API call functions responsible for fetching data from the server.</li>
  <li>The <code class="language-plaintext highlighter-rouge">components</code> folder is divided into <code class="language-plaintext highlighter-rouge">containers</code> and <code class="language-plaintext highlighter-rouge">presentation</code> sub-folders.
    <ul>
      <li>The <code class="language-plaintext highlighter-rouge">containers</code> folder contains container components that handle logic and data management.</li>
      <li>The <code class="language-plaintext highlighter-rouge">presentation</code> folder contains presentation components that focus on rendering UI elements.</li>
    </ul>
  </li>
  <li>The <code class="language-plaintext highlighter-rouge">repository</code> folder contains the <code class="language-plaintext highlighter-rouge">wordRepo.ts</code> file, which implements the WordDataRepository class responsible for data access and manipulation.</li>
  <li>The <code class="language-plaintext highlighter-rouge">types</code> folder holds the <code class="language-plaintext highlighter-rouge">WordData.ts</code> file, defining the type for WordData objects.</li>
  <li>The <code class="language-plaintext highlighter-rouge">App.tsx</code> file represents the main application component that brings together other components.</li>
  <li>The <code class="language-plaintext highlighter-rouge">index.tsx</code> file serves as the entry point of your application.</li>
  <li>The <code class="language-plaintext highlighter-rouge">public</code> folder contains static files, such as the HTML template (<code class="language-plaintext highlighter-rouge">index.html</code>).</li>
  <li>Other files and folders can be present based on your specific application needs and additional configuration files.</li>
</ul>

<p>By implementing the Repository Pattern and Container/Presentation Pattern, we’ve achieved a robust and maintainable architecture for the Thai Word Game project. The Repository Pattern separates data access logic from the rest of the application, while the Container/Presentation Pattern promotes separation of concerns between data management and UI components. Together, these patterns enhance code organization, reusability, and testability. Adopting these patterns in your own projects can lead to cleaner, more scalable, and maintainable code bases.</p>]]></content><author><name>Patt Sookmark</name></author><summary type="html"><![CDATA[In this blog post, we will explore two essential architectural patterns used in the development of the Thai Word Game: the Repository Pattern and the Container/Presentation Pattern. These patterns provide structure, organization, and maintainability to our project, enabling us to separate concerns and promote code reuse. By implementing these patterns, we can create a scalable and maintainable application with clear separation between data access, logic, and user interface components.]]></summary></entry><entry><title type="html">Simplify Backend Development with Express TypeScript Boilerplate!</title><link href="http://localhost:4000/2023/06/07/express-template.html" rel="alternate" type="text/html" title="Simplify Backend Development with Express TypeScript Boilerplate!" /><published>2023-06-07T00:00:00-06:00</published><updated>2023-06-07T00:00:00-06:00</updated><id>http://localhost:4000/2023/06/07/express-template</id><content type="html" xml:base="http://localhost:4000/2023/06/07/express-template.html"><![CDATA[<p><img class="blog-banner" src="/asset/blog-express-template.png" alt="blog-express-template" /></p>

<p>As a front-end developer venturing into the world of backend development, I understand the challenges of setting up a new server every time you want to test a new idea. That’s why I’m excited to share my solution: Express TypeScript Boilerplate, a game-changing template that simplifies the process of building Express servers using TypeScript.</p>

<p>🔧 Key Features:</p>

<ul>
  <li>Express server with TypeScript</li>
  <li>Local SQLite database</li>
  <li>Knex query builder for development environment</li>
  <li>CORS middleware for seamless cross-origin requests</li>
</ul>

<p>📦 Get Started:
1️⃣ Clone the repository: <code class="language-plaintext highlighter-rouge">git clone &lt;https://github.com/your-username/express-typescript-boilerplate.git</code>&gt;
2️⃣ Install dependencies: <code class="language-plaintext highlighter-rouge">npm install</code>
3️⃣ Start the development server: <code class="language-plaintext highlighter-rouge">npm run dev</code>
4️⃣ Access the server at: <code class="language-plaintext highlighter-rouge">http://localhost:3001</code></p>

<p>🌐 GitHub Repository: <a href="https://github.com/your-username/express-typescript-boilerplate">Link to the repository</a></p>

<p>With Express TypeScript Boilerplate, it streamlines the backend development process, allowing you to focus on bringing your ideas to life quickly and efficiently.</p>

<p>👥 Join the community! I invite you to contribute, report bugs, and suggest new features. Check out the <code class="language-plaintext highlighter-rouge">CONTRIBUTING.md</code> file for guidelines on how to get involved.</p>

<p>I created this template with fellow front-end developers turned backend enthusiasts in mind. Let’s simplify backend development together and unleash our creativity! 🎉</p>

<p>#Express #TypeScript #Boilerplate #BackendDevelopment #juniorFrontendDeveloper</p>]]></content><author><name>Patt Sookmark</name></author><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">🔍 Improving Productivity and Motivation in Your Job Search: My Journey Through the CAMPS Model 🔑</title><link href="http://localhost:4000/2023/06/05/camp-model.html" rel="alternate" type="text/html" title="🔍 Improving Productivity and Motivation in Your Job Search: My Journey Through the CAMPS Model 🔑" /><published>2023-06-05T00:00:00-06:00</published><updated>2023-06-05T00:00:00-06:00</updated><id>http://localhost:4000/2023/06/05/camp-model</id><content type="html" xml:base="http://localhost:4000/2023/06/05/camp-model.html"><![CDATA[<p><img class="blog-banner" src="/asset/blog-camps-model.png" alt="camps-model-banner" /></p>

<p>A job search can be exciting yet daunting. 😮 But fear not! 🌟 I’ve discovered a game-changing approach to keep productivity high and motivation soaring during my own job search journey. 🚀 Let’s explore the transformative power of the CAMPS model—Certainty, Autonomy, Mastery, Purpose, and Social Inclusion. Get ready to be inspired and equipped with the tools you need to succeed!</p>

<h3 id="-section-1-certainty-">💡 Section 1: Certainty 💡</h3>

<p>🔍 Clarity is key. By defining my positioning—React, TypeScript, Express, Database, and project management—I gained a sense of certainty. 🎯 Armed with this focus, I confidently navigated the job market, making strategic decisions with purpose.</p>

<h3 id="-section-2-autonomy-">💡 Section 2: Autonomy 💡</h3>

<p>🌟 It’s time to take control! I embarked on my own project, Thai-Words Game, fueled by my passions and inspirations. 🎨 The freedom to choose projects that aligned with my interests and goals empowered me to own my job search journey. 🌟💻</p>

<h3 id="-section-3-mastery-">💡 Section 3: Mastery 💡</h3>

<p>🔥 Continuous growth is the name of the game! 📚 By setting clear objectives and results, I transformed each endeavor into a valuable opportunity for skill development. Mastering React, TypeScript, Express, and databases not only boosted my confidence but also showcased my capabilities.🚀📈</p>

<h3 id="-section-4-purpose-">💡 Section 4: Purpose 💡</h3>

<p>💪 Beyond technicalities, the purpose is our guiding light. I committed to coding in public, sharing my progress with the world. 🌍 By contributing to the coding community, I found meaning in my journey, leaving a lasting impact and inspiring others. 💻🌟</p>

<h3 id="-section-5-social-inclusion-">💡 Section 5: Social Inclusion 💡</h3>

<p>👥 No journey is complete without connections! 👥 I sought support through regular stand-ups with my buddy, engaging in meaningful conversations about progress and challenges. Additionally, a mentor reviewed my code, providing invaluable feedback. Together, let’s build a supportive network and foster a sense of belonging within the coding community! 👥💬</p>

<h3 id="-conclusion-your-journey-awaits-">🌟 Conclusion: Your Journey Awaits! 🌟</h3>

<p>🔓 By embracing the CAMPS model—Certainty, Autonomy, Mastery, Purpose, and Social Inclusion—I have gained productivity and motivation during my job search. 🌈 Let’s make your job search a success story! 💥Remember💥, your journey is unique and is not a competition! Adapt the CAMPS model to your needs and aspirations, and prepare for a transformative experience. 🌟🔓 Happy job searching🚀</p>]]></content><author><name>Patt Sookmark</name></author><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">My AWS and IAM Journey: Safeguarding My Word Game App’s Audio Files in S3</title><link href="http://localhost:4000/2023/05/30/AWS-IAM.html" rel="alternate" type="text/html" title="My AWS and IAM Journey: Safeguarding My Word Game App’s Audio Files in S3" /><published>2023-05-30T00:00:00-06:00</published><updated>2023-05-30T00:00:00-06:00</updated><id>http://localhost:4000/2023/05/30/AWS-IAM</id><content type="html" xml:base="http://localhost:4000/2023/05/30/AWS-IAM.html"><![CDATA[<p><img class="blog-banner" src="/asset/blog-AWS-IAM.png" alt="AWS and Banner" /></p>

<p>Today, I embarked on a significant step in building my word game app by exploring Amazon Web Services (AWS) and its fascinating world of cloud computing. AWS offers a multitude of services, and one that particularly caught my attention is Amazon S3 (Simple Storage Service). With S3, I have the ability to securely store and manage my app’s audio files. How exciting!</p>

<h2 id="amazon-web-services-aws"><strong>Amazon Web Services (AWS)</strong></h2>

<p>AWS is a comprehensive and widely-used cloud computing platform that provides a range of services and tools to help businesses and developers build, deploy, and scale applications. One of the prominent services offered by AWS is Amazon S3, which is a scalable object storage service specifically designed for storing and retrieving data.</p>

<p>With S3, I can create buckets (containers) to securely store my audio files. These files can be accessed programmatically or through a web interface, making it easy for me to integrate them into my word game app. S3 ensures durability, high availability, and performance, thereby ensuring that my audio files are always accessible.</p>

<h2 id="identity-and-access-management-iam"><strong>Identity and Access Management (IAM)</strong></h2>

<p>Let me tell you about IAM! IAM plays an essential role in AWS security as it enables me to manage access to resources. With IAM, I have the power to control who can access my resources and what they can do with them. IAM allows me to grant granular permissions to specific users or roles, ensuring that only authorized entities can access my audio files. For instance, I can create an IAM user for my word game app and assign appropriate permissions to read or write files in the S3 bucket. This way, I have fine-grained control over who can interact with my assets.</p>

<p>IAM also offers features such as multi-factor authentication (MFA) and integration with AWS CloudTrail for auditing and logging user actions, thereby enhancing the security of my AWS resources.</p>

<h2 id="best-practices-for-using-s3-and-iam-together"><strong>Best Practices for Using S3 and IAM Together</strong></h2>

<p>To effectively and securely manage my audio files in S3 using IAM, it is important to consider the following best practices:</p>

<ol>
  <li><strong>Principle of Least Privilege</strong>: Follow the principle of least privilege and grant only the necessary permissions to the IAM users or roles. Limit access to the S3 bucket to prevent unauthorized actions.</li>
  <li><strong>Separation of Environments</strong>: Use separate IAM roles or users for different environments (e.g., development, staging, production) to ensure isolation and minimize potential risks.</li>
  <li><strong>Secure Access Keys</strong>: When using IAM access keys for programmatic access to S3, securely manage and rotate the access keys regularly. Avoid embedding access keys directly in code repositories or sharing them insecurely.</li>
  <li><strong>Regular Auditing</strong>: Monitor and review IAM policies and access permissions periodically to ensure they align with the app’s requirements. Remove unnecessary permissions and accounts that are no longer needed.</li>
  <li><strong>Enable MFA</strong>: Consider enabling multi-factor authentication (MFA) for IAM users, especially for privileged accounts, to provide an additional layer of security.</li>
</ol>

<p>Today’s journey into AWS and IAM has been enlightening. I am thrilled to apply this newfound knowledge to safeguard my word game app’s audio files in S3. AWS is a vast landscape, and I am eager to explore more of its services. Until next time!</p>]]></content><author><name>Patt Sookmark</name></author><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Understand the Power of Empathy Mapping: Designing Interfaces Users Will Love</title><link href="http://localhost:4000/2023/05/19/Empathy-Mapping.html" rel="alternate" type="text/html" title="Understand the Power of Empathy Mapping: Designing Interfaces Users Will Love" /><published>2023-05-19T00:00:00-06:00</published><updated>2023-05-19T00:00:00-06:00</updated><id>http://localhost:4000/2023/05/19/Empathy-Mapping</id><content type="html" xml:base="http://localhost:4000/2023/05/19/Empathy-Mapping.html"><![CDATA[<p><img class="blog-banner" src="/asset/blog-empathy-mapping.png" alt="Empathy Mapping Banner" />
You know what’s cool? Empathy mapping. And guess what? It’s not just for UX designers—it’s also a game-changer for UI developers like you. Let me tell you why:</p>

<ul>
  <li>
    <p><strong>User-Centered Design</strong> : Empathy mapping helps you design interfaces that users will adore. By understanding their needs, frustrations, and goals, you can create UIs that make their hearts skip a beat. Who doesn’t want users to fall head over heels for their UI?</p>
  </li>
  <li>
    <p><strong>Design Decision Making</strong> : Empathy mapping gives you the power to make smart design decisions. By diving into users’ minds and behaviors, you can prioritize features, organize elements, and choose the right interactions. It’s like having a crystal ball that shows you exactly what users want.</p>
  </li>
  <li>
    <p><strong>Collaboration and Communication</strong> : Empathy mapping is often a collaborative process. And as a UI developer, knowing the ins and outs of empathy mapping allows you to actively contribute to discussions, share insights, and collaborate smoothly with the design team. It’s all about teamwork!</p>
  </li>
  <li>
    <p><strong>Contextual Design</strong> : Understanding the context in which users will use your interface is crucial. Empathy mapping helps you grasp that context and design interfaces that feel like a natural extension of users’ lives. It’s like speaking their language and fitting right into their world.</p>
  </li>
  <li>
    <p><strong>Iterative Design and Continuous Improvement</strong>: Empathy mapping is not a one-time thing. It’s an ongoing process of learning and improving. As a UI developer, you can keep refining your designs based on user feedback and observations, making your UI a shining star in the ever-evolving world of UX.</p>
  </li>
</ul>

<p>So, my fellow UI developer, embrace empathy mapping! It’s your secret weapon to creating user-centered UI designs that rock users’ socks off. Let empathy guide your way, and you’ll be a UI hero in no time.</p>

<p>Now, let’s talk about empathy mapping itself and why it’s so awesome for UX designers and UI developers alike.</p>

<p>Empathy mapping is a technique used in the UX design process to gain a deeper understanding of users’ needs, emotions, and behaviors. It helps designers develop empathy for the users they are designing for, enabling them to create more user-centered and meaningful solutions.</p>

<p>I recently took Google’s UX design course and here’s the Google’s empathy mapping process. It involves four key components:</p>

<ol>
  <li>Say: In this step, designers focus on capturing what the users say—both in direct quotes and paraphrased statements. This can be gathered through user interviews, surveys, or other forms of user research. The goal is to gather insights into users’ expressed needs, desires, pain points, and goals.</li>
  <li>Think: Here, designers try to uncover the thoughts and beliefs that drive users’ behaviors. This involves identifying users’ assumptions, expectations, mental models, and underlying motivations. Designers can infer these aspects by analyzing user feedback, observing their actions, and considering the context in which they use the product or service.</li>
  <li>Do: This step involves understanding the actions and behaviors users exhibit in relation to the product or service. Designers observe and document the specific tasks, interactions, and behaviors that users engage in while using the product. This helps identify pain points, areas of confusion, or usability issues that need to be addressed.</li>
  <li>Feel: The last component focuses on capturing the emotional aspect of users’ experiences. Designers seek to understand the range of emotions users may feel when interacting with the product or service. This can include positive emotions like joy and satisfaction, as well as negative emotions like frustration or confusion. Understanding the emotional landscape of users helps designers create more emotionally engaging and enjoyable experiences.</li>
</ol>

<p><strong>Link to</strong> <a href="https://docs.google.com/presentation/d/11TNHpq2-sL4Bfw9Yjr2TGyJe0rvZ3ofWCjDrsNbes0Q/template/preview?resourcekey=0-VXznPwcprIp5hxtWu0HHvA">Google Empathy Map Template</a></p>

<p>By creating an empathy map, designers can synthesize and visualize the gathered information, making it easier to identify patterns, trends, and insights about the users. This understanding then informs the design decisions, helps prioritize features and improvements, and guides the overall user-centered design process. UI developers that understand the empathy mapping process can contribute to creating user-centered interfaces that meet users’ needs, enhance usability, and deliver a positive user experience. It helps bridge the gap between design and development, ensuring that the final product aligns with users’ expectations and goals.</p>]]></content><author><name>Patt Sookmark</name></author><summary type="html"><![CDATA[You know what’s cool? Empathy mapping. And guess what? It’s not just for UX designers—it’s also a game-changer for UI developers like you. Let me tell you why:]]></summary></entry><entry><title type="html">A Beginner’s Guide to Understanding Node Modules in Node.js</title><link href="http://localhost:4000/2023/05/11/NodeModule.html" rel="alternate" type="text/html" title="A Beginner’s Guide to Understanding Node Modules in Node.js" /><published>2023-05-11T00:00:00-06:00</published><updated>2023-05-11T00:00:00-06:00</updated><id>http://localhost:4000/2023/05/11/NodeModule</id><content type="html" xml:base="http://localhost:4000/2023/05/11/NodeModule.html"><![CDATA[<p><img class="blog-banner" src="/asset/blog-node-module.png" alt="Node Module Banner" />
Node.js is a popular platform for building server-side applications using JavaScript. One of its key features is its module system, which allows developers to organize their code into reusable and maintainable pieces. In this blog post, we’ll explore what Node modules are, how they work, and the different types of modules.</p>

<h2 id="introduction-to-node-modules">Introduction to Node Modules</h2>

<p>Node modules are essentially JavaScript files that encapsulate a set of related functionality. Each module can expose functions, classes, objects, or variables that can be imported and used in other modules or scripts. This modularity makes it easier to organize, maintain, and scale Node.js applications.</p>

<h3 id="types-of-node-modules">Types of Node Modules</h3>

<p>There are two types of Node modules: core modules and user-defined modules.</p>

<p>Core modules are modules that are built into Node.js itself. These modules can be accessed without any additional installation or setup.</p>

<p>User-defined modules, on the other hand, are modules created by developers for their specific use case. These modules can be shared and reused across multiple projects. User-defined modules can be downloaded and installed using the Node Package Manager (NPM).</p>

<h3 id="creating-a-node-module">Creating a Node Module</h3>

<p>To create a Node module, you need to follow a few steps:</p>

<ol>
  <li>Create a new JavaScript file with the code you want to encapsulate.</li>
  <li>Export the functions, classes, objects, or variables you want to make available to other modules.</li>
  <li>Import the module in another JavaScript file using the ‘require’ function.</li>
</ol>

<p>Here’s an example of how to create a simple Node module:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// sampleModule.js
const add = (a, b) =&gt; {
  return a + b;
}

module.exports = {
  add: add
};
</code></pre></div></div>

<p>In the code above, we define a function ‘add’ and export it using the ‘module.exports’ object. This allows us to import the module and use the ‘add’ function in another JavaScript file:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// index.js
const sampleModule = require('./sampleModule');

console.log(sampleModule.add(2, 3)); // Output: 5

</code></pre></div></div>

<p>In this code, we import the ‘sampleModule’ and use the ‘add’ function to add two numbers.</p>

<h3 id="commonjs-modules">CommonJS Modules</h3>

<p>In CommonJS modules, the <code class="language-plaintext highlighter-rouge">require</code> function is used to import modules, and the <code class="language-plaintext highlighter-rouge">exports</code> object is used to define what is exported from a module. When you need to access functionality from other modules, <code class="language-plaintext highlighter-rouge">require</code> comes to the rescue, and <code class="language-plaintext highlighter-rouge">exports</code> lets you share your own code with the world.</p>

<p>Here’s an example of CommonJS modules:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// math.js
exports.add = (a, b) =&gt; a + b;

// index.js
const math = require('./math');
console.log(math.add(2, 3)); // Output: 5

</code></pre></div></div>

<p>In this example, the <code class="language-plaintext highlighter-rouge">add</code> function is exported from the <code class="language-plaintext highlighter-rouge">math</code> module using the <code class="language-plaintext highlighter-rouge">exports</code> object. Then, in the <code class="language-plaintext highlighter-rouge">index.js</code> file, we use <code class="language-plaintext highlighter-rouge">require</code> to import the <code class="language-plaintext highlighter-rouge">math</code> module and access the <code class="language-plaintext highlighter-rouge">add</code> function.</p>

<h3 id="es-modules">ES Modules</h3>

<p>ES modules offer a modern approach to module management. Discover the power of <code class="language-plaintext highlighter-rouge">import</code> and <code class="language-plaintext highlighter-rouge">export</code>statements in Node.js, and learn how they surpass the capabilities of CommonJS modules. We’ll delve into the nuances of default exports and named exports, and discuss the interplay between ES modules and CommonJS modules. Unleash the full potential of ES modules and take your code organization to the next level.</p>

<p>Here’s an example of ES modules:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// math.js
export const add = (a, b) =&gt; a + b;

// index.js
import { add } from './math';
console.log(add(2, 3)); // Output: 5

</code></pre></div></div>

<p>In this example, the <code class="language-plaintext highlighter-rouge">add</code> function is exported using the <code class="language-plaintext highlighter-rouge">export</code> statement, and then it’s imported using the <code class="language-plaintext highlighter-rouge">import</code> statement in the <code class="language-plaintext highlighter-rouge">index.js</code> file</p>

<p>🎉 🎉 🪄 🪄 🪄 🪄 🪄 🪄🎉 🎉
Congratulations on mastering the art of Node modules! Armed with a deep understanding of <code class="language-plaintext highlighter-rouge">require</code>, <code class="language-plaintext highlighter-rouge">exports</code>,<code class="language-plaintext highlighter-rouge">export</code>, and <code class="language-plaintext highlighter-rouge">import</code>, you possess the tools to transform your codebase into a well-structured, maintainable masterpiece. Embrace the magic of Node modules in your projects, and experience the joy of clean, efficient coding.</p>

<p>Remember, your coding journey is an adventure, and Node modules are your trusty companions. May your modules always be organized, your bugs scarce, and your coding endeavors filled with endless creativity and success. Happy coding!</p>]]></content><author><name>Patt Sookmark</name></author><summary type="html"><![CDATA[Node.js is a popular platform for building server-side applications using JavaScript. One of its key features is its module system, which allows developers to organize their code into reusable and maintainable pieces. In this blog post, we’ll explore what Node modules are, how they work, and the different types of modules.]]></summary></entry><entry><title type="html">Code In Public - Thai Word Game II</title><link href="http://localhost:4000/2023/05/02/ThaiWebGame2.html" rel="alternate" type="text/html" title="Code In Public - Thai Word Game II" /><published>2023-05-02T00:00:00-06:00</published><updated>2023-05-02T00:00:00-06:00</updated><id>http://localhost:4000/2023/05/02/ThaiWebGame2</id><content type="html" xml:base="http://localhost:4000/2023/05/02/ThaiWebGame2.html"><![CDATA[<h1>Code In Public - Thai Word Game II</h1>
<h1 id="reflection">»Reflection«</h1>

<h2 id="start-the-project-by-using-nextjs">Start the project by using Next.JS</h2>

<p>Next.js is a popular React framework that makes it easy for developers to build server-side rendered web applications. In this blog, I’ll discuss how I use Next.JS in my word game application.</p>

<h2 id="why-nextjs">Why Next.js?</h2>

<p>One of the main reasons why I’m using Next.js for this project is to learn about server-side components. With server-side rendering, the performance of the word game is improved by pre-rendering pages that speeds up the load time from the server and sending them to the client.</p>

<h2 id="creating-routes-with-nextjs">Creating Routes with Next.js</h2>

<p>Next.js has a directory-based routing system that makes it easy to create and manage routes. I can create a new page by creating a new file in the “pages” directory. For example, if I want to create a “home” page, I can create a file called “index.js” in the “pages” directory. Similarly, to create a “contact” page, I can create a file called “contact.js” in the “pages” directory.</p>

<h2 id="adding-images-in-nextjs">Adding Images in Next.js</h2>

<p>Next.js uses the “next/image” component to optimize images for performance. This component automatically resizes and optimizes images based on the device size and screen resolution.
To use the “next/image” component, I need to provide an image URL and configure its properties. The image URL can be either an absolute URL or a relative path to the image file in our project.
Next.js also provides a configuration object that can be uses to customize the image properties. I can configure properties such as the image size, quality, and layout.</p>

<h2 id="creating-sample-audio-files">Creating Sample Audio Files</h2>

<p>For this project, I create a couple sample audio files using QuickTime and GarageBand. I can create a new audio file in GarageBand, make some edits, and export it as an MP3 or M4A file. MP3 is a more widely used format, but M4A is a higher quality format that is compatible with Apple devices.</p>

<h2 id="handling-audio-files-in-nextjs">Handling Audio Files in Next.js</h2>

<p>To add an audio file to our web app, my choices are either the HTML audio tag or the JavaScript audio constructor. The HTML audio tag is easier to use, but the JavaScript audio constructor gives me more control over the audio playback. Because I will be rendering and referencing multiples audio file on the same page, I decided to use constructor over html tag.
<br />
<br />
I have now completed Phase I of the project and will be moving on to Phase II, which involves the creation of the server and database. Please stay tuned for more updates.</p>

<p><a href="https://github.com/pattpjy/word-game">Github</a></p>]]></content><author><name>Patt Sookmark</name></author><summary type="html"><![CDATA[Code In Public - Thai Word Game II »Reflection«]]></summary></entry><entry><title type="html">GraphQL vs Rest</title><link href="http://localhost:4000/2023/04/26/GraphQL-vs-Rest.html" rel="alternate" type="text/html" title="GraphQL vs Rest" /><published>2023-04-26T00:00:00-06:00</published><updated>2023-04-26T00:00:00-06:00</updated><id>http://localhost:4000/2023/04/26/GraphQL%20vs%20Rest</id><content type="html" xml:base="http://localhost:4000/2023/04/26/GraphQL-vs-Rest.html"><![CDATA[<h1>GraphQL vs Rest</h1>
<p>I recently worked on a small project that involved consuming GitHub’s GraphQL API to display specific users’ public repositories. This project was a great opportunity for me to learn about GraphQL and how it differs from REST API. In this reflection blog, I will share my experience of using GraphQL API and the challenges I faced during the project.</p>

<p>One of the biggest challenges I faced while learning to use GitHub’s GraphQL explorer was understanding how the data was structured. It was a little overwhelming at first, but I overcame this challenge by watching a few YouTube videos and reading through other developers’ GitHub repositories. Once I got the hang of it, I found GraphQL to be quite powerful.</p>

<p>For those who may not be familiar, REST is a popular architectural style used in designing and developing web services. It involves the use of HTTP protocol for communication and works on the principle of stateless communication. The resources are accessed using HTTP methods such as GET, POST, PUT, DELETE, etc., and the response from the server is usually sent in JSON, XML, or HTML format.</p>

<p>On the other hand, GraphQL is a query language created by Facebook that allows clients to request only the required data. Unlike REST, which returns all the data present in the resource, GraphQL has a strongly-typed schema that defines the data structure of the API. Clients can request data by specifying the required fields in the query.</p>

<p>The main differences between GraphQL and REST APIs are:</p>

<ul>
  <li>Data fetching: GraphQL allows the client to fetch only the required data, while REST returns all the data present in the resource.</li>
  <li>Schema: GraphQL has a strongly-typed schema that defines the data structure of the API, while REST has no schema.</li>
  <li>HTTP requests: REST APIs use different HTTP methods to access resources, while GraphQL uses a single endpoint for all requests.</li>
  <li>Response format: REST APIs usually return data in JSON, XML, or HTML format, while GraphQL always returns data in JSON format.</li>
  <li>Caching: REST APIs have better caching support due to the use of HTTP caching mechanisms, while GraphQL does not have native support for caching.</li>
</ul>

<p>In conclusion, both GraphQL and REST have their own advantages and disadvantages, and the choice between the two depends on the specific requirements of the project. My experience of using GitHub’s GraphQL API was quite positive, and it was interesting to see the data available from GitHub. Overall, this project helped me broaden my knowledge and experience of working with different APIs, which will certainly come in handy in my future development projects.</p>

<p>Link to <a href="https://github.com/pattpjy/try_graphql">GitHub</a> repo</p>]]></content><author><name>Patt Sookmark</name></author><summary type="html"><![CDATA[GraphQL vs Rest I recently worked on a small project that involved consuming GitHub’s GraphQL API to display specific users’ public repositories. This project was a great opportunity for me to learn about GraphQL and how it differs from REST API. In this reflection blog, I will share my experience of using GraphQL API and the challenges I faced during the project.]]></summary></entry><entry><title type="html">Projects Details</title><link href="http://localhost:4000/2023/04/20/Projects.html" rel="alternate" type="text/html" title="Projects Details" /><published>2023-04-20T00:00:00-06:00</published><updated>2023-04-20T00:00:00-06:00</updated><id>http://localhost:4000/2023/04/20/Projects</id><content type="html" xml:base="http://localhost:4000/2023/04/20/Projects.html"><![CDATA[<h2 id="projects-journal-and-reflection">Projects Journal and reflection</h2>

<h3 id="cookahead">CookAhead</h3>

<p>A single page application that consumes Restful API. It was built with React and React router while utilizing Reach hook pattern. This app also used parser library to parse the nested HTML tag into React element. The application design with mobile first mindset and use media query to manage css for different screen size. Cypress is used to perform e2e testing.
<a href="http://cook-ahead.vercel.app">Live Site</a> <a href="https://github.com/pattpjy/cookAhead">Github</a></p>

<h3 id="fitlit">FitLit</h3>

<p>We created a fitness tracking application using vanilla javascript. We used a local server and incorporated fetch request to GET and POST data. Error handling was added to both fetch GET and POST requests to catch errors that may occur from either request. Features added allows users to see all data displayed in a visually pleasing manner using charts from chart.js. We utilized dayjs to format and standardize dates. We utilized recursion to construct a weeks worth of data if there are gaps in the data’s date. We added a helper function file to house functions that are use multiple times throughout the project to keep our code DRY.
<a href="https://github.com/pattpjy/FitLit">Github</a></p>

<h3 id="playpal">PlayPal</h3>

<p>Full stack application using PERN Stack
This is an on-going project!
<a href="https://play-pals.vercel.app">Live Site</a> <a href="https://github.com/ElBrewster/PlayPal">Github</a></p>

<h3 id="closet-collection">Closet Collection</h3>

<p>Full stack application with a collaboration of frontend and backend team to create closet organization application. This application has been nominate among 10 teams to participate in final cohort competition
<a href="http://closet-manager-fe.vercel.app">Live Site</a> <a href="https://github.com/pattpjy/closet-manager-fe-Copy">Github</a></p>

<h3 id="news-reader">News Reader</h3>

<p>A single page application with no-route evolved to a multi-route using React router 6 with the purpose of solidify understanding of useLocation and useParem hook.</p>]]></content><author><name>Patt Sookmark</name></author><summary type="html"><![CDATA[Projects Journal and reflection]]></summary></entry><entry><title type="html">Code In Public - Thai Word Game</title><link href="http://localhost:4000/2023/03/21/ThaiWebGame.html" rel="alternate" type="text/html" title="Code In Public - Thai Word Game" /><published>2023-03-21T00:00:00-06:00</published><updated>2023-03-21T00:00:00-06:00</updated><id>http://localhost:4000/2023/03/21/ThaiWebGame</id><content type="html" xml:base="http://localhost:4000/2023/03/21/ThaiWebGame.html"><![CDATA[<h1 id="thai-word-game-phase-i">Thai Word Game Phase I</h1>

<p>My first language is Thai, and I want to create a simple webapp word game to play with my four years old. I watched my daughter played with a stuffed animal that say random words when she press a button. She’d kept pressing the button and repeating the words over and over. I though it would be fun to create a similar UI web application that my daughter can simply click a button and it would play words in Thai.</p>

<h4 id="task-1-ui-wire-frame">Task 1 UI wire frame</h4>

<p><a href="https://excalidraw.com/#json=SOM85H-29YGUNFU6atZI6,AfqFty9PlsO5-V41baM6qA">UI Wire Frame</a></p>

<p><img class="blog-img" src="../../../asset/ThInitWireFrame.png" /></p>

<p>Because it will be for a small child, the image and buttons would be fairly large. The layout will be simple with minimal color contrast and easy to understand images.</p>

<h4 id="task-2-breaking-work-down--by-color-blocks">Task 2 Breaking work down : by color blocks</h4>

<p>I am very excited to see this app in action that led me to break task down in the way that I can deliver value quickly. To be able to deliver the most basic functionality, I need to create the component in the red area first. The red box include the UI components and the backend server with single table to support the minimum required data.<br />
<img class="blog-img" src="../../../asset/ThWorkBreakDown.png" /></p>

<p>The next step is to write user story, creating React architecture and backend server and database. My intend is to build this application in public. Stay tune for more post!</p>]]></content><author><name>Patt Sookmark</name></author><summary type="html"><![CDATA[Thai Word Game Phase I]]></summary></entry></feed>