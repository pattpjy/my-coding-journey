<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-05-02T17:40:49-06:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">My Coding Journey Blog</title><author><name>Patt Sookmark</name></author><entry><title type="html">Code In Public - Thai Word Game II</title><link href="http://localhost:4000/2023/05/02/ThaiWebGame2.html" rel="alternate" type="text/html" title="Code In Public - Thai Word Game II" /><published>2023-05-02T00:00:00-06:00</published><updated>2023-05-02T00:00:00-06:00</updated><id>http://localhost:4000/2023/05/02/ThaiWebGame2</id><content type="html" xml:base="http://localhost:4000/2023/05/02/ThaiWebGame2.html"><![CDATA[<h1 id="reflection">»Reflection«</h1>

<h2 id="start-the-project-by-using-nextjs">Start the project by using Next.JS</h2>

<p>Next.js is a popular React framework that makes it easy for developers to build server-side rendered web applications. In this blog, I’ll discuss how I use Next.JS in my word game application.</p>

<h2 id="why-nextjs">Why Next.js?</h2>

<p>One of the main reasons why I’m using Next.js for this project is to learn about server-side components. With server-side rendering, the performance of the word game is improved by pre-rendering pages that speeds up the load time from the server and sending them to the client.</p>

<h2 id="creating-routes-with-nextjs">Creating Routes with Next.js</h2>

<p>Next.js has a directory-based routing system that makes it easy to create and manage routes. I can create a new page by creating a new file in the “pages” directory. For example, if I want to create a “home” page, I can create a file called “index.js” in the “pages” directory. Similarly, to create a “contact” page, I can create a file called “contact.js” in the “pages” directory.</p>

<h2 id="adding-images-in-nextjs">Adding Images in Next.js</h2>

<p>Next.js uses the “next/image” component to optimize images for performance. This component automatically resizes and optimizes images based on the device size and screen resolution.
To use the “next/image” component, I need to provide an image URL and configure its properties. The image URL can be either an absolute URL or a relative path to the image file in our project.
Next.js also provides a configuration object that can be uses to customize the image properties. I can configure properties such as the image size, quality, and layout.</p>

<h2 id="creating-sample-audio-files">Creating Sample Audio Files</h2>

<p>For this project, I create a couple sample audio files using QuickTime and GarageBand. I can create a new audio file in GarageBand, make some edits, and export it as an MP3 or M4A file. MP3 is a more widely used format, but M4A is a higher quality format that is compatible with Apple devices.</p>

<h2 id="handling-audio-files-in-nextjs">Handling Audio Files in Next.js</h2>

<p>To add an audio file to our web app, my choices are either the HTML audio tag or the JavaScript audio constructor. The HTML audio tag is easier to use, but the JavaScript audio constructor gives me more control over the audio playback. Because I will be rendering and referencing multiples audio file on the same page, I decided to use constructor over html tag.
<br />
<br />
I have now completed Phase I of the project and will be moving on to Phase II, which involves the creation of the server and database. Please stay tuned for more updates.</p>

<p><a href="https://github.com/pattpjy/word-game">Github</a></p>]]></content><author><name>Patt Sookmark</name></author><summary type="html"><![CDATA[»Reflection«]]></summary></entry><entry><title type="html">GraphQL vs Rest</title><link href="http://localhost:4000/2023/04/26/GraphQL-vs-Rest.html" rel="alternate" type="text/html" title="GraphQL vs Rest" /><published>2023-04-26T00:00:00-06:00</published><updated>2023-04-26T00:00:00-06:00</updated><id>http://localhost:4000/2023/04/26/GraphQL%20vs%20Rest</id><content type="html" xml:base="http://localhost:4000/2023/04/26/GraphQL-vs-Rest.html"><![CDATA[<p>I recently worked on a small project that involved consuming GitHub’s GraphQL API to display specific users’ public repositories. This project was a great opportunity for me to learn about GraphQL and how it differs from REST API. In this reflection blog, I will share my experience of using GraphQL API and the challenges I faced during the project.</p>

<p>One of the biggest challenges I faced while learning to use GitHub’s GraphQL explorer was understanding how the data was structured. It was a little overwhelming at first, but I overcame this challenge by watching a few YouTube videos and reading through other developers’ GitHub repositories. Once I got the hang of it, I found GraphQL to be quite powerful.</p>

<p>For those who may not be familiar, REST is a popular architectural style used in designing and developing web services. It involves the use of HTTP protocol for communication and works on the principle of stateless communication. The resources are accessed using HTTP methods such as GET, POST, PUT, DELETE, etc., and the response from the server is usually sent in JSON, XML, or HTML format.</p>

<p>On the other hand, GraphQL is a query language created by Facebook that allows clients to request only the required data. Unlike REST, which returns all the data present in the resource, GraphQL has a strongly-typed schema that defines the data structure of the API. Clients can request data by specifying the required fields in the query.</p>

<p>The main differences between GraphQL and REST APIs are:</p>

<ul>
  <li>Data fetching: GraphQL allows the client to fetch only the required data, while REST returns all the data present in the resource.</li>
  <li>Schema: GraphQL has a strongly-typed schema that defines the data structure of the API, while REST has no schema.</li>
  <li>HTTP requests: REST APIs use different HTTP methods to access resources, while GraphQL uses a single endpoint for all requests.</li>
  <li>Response format: REST APIs usually return data in JSON, XML, or HTML format, while GraphQL always returns data in JSON format.</li>
  <li>Caching: REST APIs have better caching support due to the use of HTTP caching mechanisms, while GraphQL does not have native support for caching.</li>
</ul>

<p>In conclusion, both GraphQL and REST have their own advantages and disadvantages, and the choice between the two depends on the specific requirements of the project. My experience of using GitHub’s GraphQL API was quite positive, and it was interesting to see the data available from GitHub. Overall, this project helped me broaden my knowledge and experience of working with different APIs, which will certainly come in handy in my future development projects.</p>

<p>Link to <a href="https://github.com/pattpjy/try_graphql">GitHub</a> repo</p>]]></content><author><name>Patt Sookmark</name></author><summary type="html"><![CDATA[I recently worked on a small project that involved consuming GitHub’s GraphQL API to display specific users’ public repositories. This project was a great opportunity for me to learn about GraphQL and how it differs from REST API. In this reflection blog, I will share my experience of using GraphQL API and the challenges I faced during the project.]]></summary></entry><entry><title type="html">Projects Details</title><link href="http://localhost:4000/2023/04/20/Projects.html" rel="alternate" type="text/html" title="Projects Details" /><published>2023-04-20T00:00:00-06:00</published><updated>2023-04-20T00:00:00-06:00</updated><id>http://localhost:4000/2023/04/20/Projects</id><content type="html" xml:base="http://localhost:4000/2023/04/20/Projects.html"><![CDATA[<h2 id="projects-journal-and-reflection">Projects Journal and reflection</h2>

<h3 id="cookahead">CookAhead</h3>

<p>A single page application that consumes Restful API. It was built with React and React router while utilizing Reach hook pattern. This app also used parser library to parse the nested HTML tag into React element. The application design with mobile first mindset and use media query to manage css for different screen size. Cypress is used to perform e2e testing.
<a href="http://cook-ahead.vercel.app">Live Site</a> <a href="https://github.com/pattpjy/cookAhead">Github</a></p>

<h3 id="fitlit">FitLit</h3>

<p>We created a fitness tracking application using vanilla javascript. We used a local server and incorporated fetch request to GET and POST data. Error handling was added to both fetch GET and POST requests to catch errors that may occur from either request. Features added allows users to see all data displayed in a visually pleasing manner using charts from chart.js. We utilized dayjs to format and standardize dates. We utilized recursion to construct a weeks worth of data if there are gaps in the data’s date. We added a helper function file to house functions that are use multiple times throughout the project to keep our code DRY.
<a href="https://github.com/pattpjy/FitLit">Github</a></p>

<h3 id="playpal">PlayPal</h3>

<p>Full stack application using PERN Stack
This is an on-going project!
<a href="https://play-pals.vercel.app">Live Site</a> <a href="https://github.com/ElBrewster/PlayPal">Github</a></p>

<h3 id="closet-collection">Closet Collection</h3>

<p>Full stack application with a collaboration of frontend and backend team to create closet organization application. This application has been nominate among 10 teams to participate in final cohort competition
<a href="http://closet-manager-fe.vercel.app">Live Site</a> <a href="https://github.com/pattpjy/closet-manager-fe-Copy">Github</a></p>

<h3 id="news-reader">News Reader</h3>

<p>A single page application with no-route evolved to a multi-route using React router 6 with the purpose of solidify understanding of useLocation and useParem hook.</p>]]></content><author><name>Patt Sookmark</name></author><summary type="html"><![CDATA[Projects Journal and reflection]]></summary></entry><entry><title type="html">Code In Public - Thai Word Game</title><link href="http://localhost:4000/2023/03/21/ThaiWebGame.html" rel="alternate" type="text/html" title="Code In Public - Thai Word Game" /><published>2023-03-21T00:00:00-06:00</published><updated>2023-03-21T00:00:00-06:00</updated><id>http://localhost:4000/2023/03/21/ThaiWebGame</id><content type="html" xml:base="http://localhost:4000/2023/03/21/ThaiWebGame.html"><![CDATA[<h1 id="thai-word-game-phase-i">Thai Word Game Phase I</h1>

<p>My first language is Thai, and I want to create a simple webapp word game to play with my four years old. I watched my daughter played with a stuffed animal that say random words when she press a button. She’d kept pressing the button and repeating the words over and over. I though it would be fun to create a similar UI web application that my daughter can simply click a button and it would play words in Thai.</p>

<h4 id="task-1-ui-wire-frame">Task 1 UI wire frame</h4>

<p><a href="https://excalidraw.com/#json=SOM85H-29YGUNFU6atZI6,AfqFty9PlsO5-V41baM6qA">UI Wire Frame</a></p>

<p><img class="blog-img" src="../../../asset/ThInitWireFrame.png" /></p>

<p>Because it will be for a small child, the image and buttons would be fairly large. The layout will be simple with minimal color contrast and easy to understand images.</p>

<h4 id="task-2-breaking-work-down--by-color-blocks">Task 2 Breaking work down : by color blocks</h4>

<p>I am very excited to see this app in action that led me to break task down in the way that I can deliver value quickly. To be able to deliver the most basic functionality, I need to create the component in the red area first. The red box include the UI components and the backend server with single table to support the minimum required data.<br />
<img class="blog-img" src="../../../asset/ThWorkBreakDown.png" /></p>

<p>The next step is to write user story, creating React architecture and backend server and database. My intend is to build this application in public. Stay tune for more post!</p>]]></content><author><name>Patt Sookmark</name></author><summary type="html"><![CDATA[Thai Word Game Phase I]]></summary></entry><entry><title type="html">1st Full Stack Webapp with PERN Stack</title><link href="http://localhost:4000/2023/03/16/Pern_Stack.html" rel="alternate" type="text/html" title="1st Full Stack Webapp with PERN Stack" /><published>2023-03-16T00:00:00-06:00</published><updated>2023-03-16T00:00:00-06:00</updated><id>http://localhost:4000/2023/03/16/Pern_Stack</id><content type="html" xml:base="http://localhost:4000/2023/03/16/Pern_Stack.html"><![CDATA[<h2 id="the-teams-first-full-stack-application-journey">The team’s first full-stack application journey</h2>

<p>My FE team was tasked with creating a simple full-stack application. We decided to use Postgres, Express, React, and Node (PERN stack)</p>

<h2 id="why-we-choose-pern-stack">Why we choose PERN Stack</h2>

<p>It is because our knowledge of Javascript would cover three out of four technologies in the stack. The combination of these technologies allowed us to build a full-stack web application with CRUD operations.</p>

<p>PERN is an acronym for Postgres, Express, React, and Node.
<a href="https://mermaid.live/edit#pako:eNpNTU1LxDAQ_SthTgrd0k42STeIB9GriHqSXEKb7q40SUlT3LX0vzuriDKHeW_exyzQxs6Bhn6IH-3Bpsxe70x4drbN5fvEbjabW_ZwGpObJuIm_OErA_8EE9gjNV0gXP_EnuKU96SbcBkowLvk7bGjbwvZmYF8cN4Z0AQ719t5yAZMWMlq5xxfzqEFndPsCpjHzmZ3f7T7ZD3o3g4TXUcb3mL0vyaioBc4gVa85LJWAgUqIXjDCziD3mK5U6iwRrGlzVGsBXx-F1SlxEpKbGRTIe7qRq1fVe1YTQ"><img src="https://mermaid.ink/img/pako:eNpNTU1LxDAQ_SthTgrd0k42STeIB9GriHqSXEKb7q40SUlT3LX0vzuriDKHeW_exyzQxs6Bhn6IH-3Bpsxe70x4drbN5fvEbjabW_ZwGpObJuIm_OErA_8EE9gjNV0gXP_EnuKU96SbcBkowLvk7bGjbwvZmYF8cN4Z0AQ719t5yAZMWMlq5xxfzqEFndPsCpjHzmZ3f7T7ZD3o3g4TXUcb3mL0vyaioBc4gVa85LJWAgUqIXjDCziD3mK5U6iwRrGlzVGsBXx-F1SlxEpKbGRTIe7qRq1fVe1YTQ?type=png" alt="" /></a></p>

<ul>
  <li>
    <p>Postgres - It is an object-relational database management system that uses the SQL language. We chose Postgres because our team members have some exposure to the relational database and also Postgres was easy to pick up.</p>
  </li>
  <li>
    <p>Express - It is a back-end framework for Node.js used for building web applications, and especially APIs. We decided to go with Express because it is a javascript framework, the documentation looked fairly straightforward, and because of the support, we have within Turing.</p>
  </li>
  <li>
    <p>React - A Front end Framework taught at Turing. One of the requirements for the project is to use react framework. Couples of benefits are Virtual DOM in React makes the user experience better and developers work faster. React allows its components to be reused which saves time and effort.</p>
  </li>
  <li>
    <p>Node.js - A Javascript runtime environment for developing server-side and networking applications.</p>
  </li>
</ul>

<h3 id="how-we-go-about-setting-up-a-workflow">How we go about setting up a workflow</h3>

<p>We approach our workflow from the FE perspective where we consider the user story first to design how our data table is going to be. First, we wrote the MVP UI, and create the server using Express. Then, we connect the express server to Postgres. Once the two frameworks re connected, we seed our mock data to the database, and voila. Time to deploy!</p>

<h3 id="what-else-we-added-to-our-pern-stack-to-make-it-work">What else we added to our PERN stack to make it work</h3>

<p>We used Knex to create the schema and write queries for Postgres. We used Docker Compose for local development with the database and Table Plus for interacting with the data.</p>

<h3 id="lessons-learned-from-the-project">Lessons learned from the project!</h3>

<ul>
  <li>
    <p><strong>Opt for a library than writing code from scratch</strong></p>

    <p>In our UI, we wanted to have a robust filter function that can filter multiple keywords and also has interactive features. As this function evolved, the code got messier and buggier to a point that we decided to use a filter library instead. Our reasoning was, we wanted to get to the core of the project, which was building a backend. Using a library not only saved us time but also created a more stable feature.</p>
  </li>
  <li>
    <p><strong>Changing MVP decision</strong></p>

    <p>As the deadline approached, we had to trim down our MVP to the most basic feature value and forgo some of the design elements we set up at the beginning to be able to deliver a usable product.</p>
  </li>
  <li>
    <p><strong>Asking for help</strong></p>

    <p>We were having difficulty with different versions of Postgres and the Knex documentation that was provided to us. With the help of a Mod4 student, we were introduced to backend tools: Docker Compose and TablePlus. These tools make working with Postgres easier and make a change to data much more simple.</p>
  </li>
</ul>]]></content><author><name>Patt Sookmark</name></author><summary type="html"><![CDATA[The team’s first full-stack application journey]]></summary></entry><entry><title type="html">MVC MVP</title><link href="http://localhost:4000/2023/03/10/MVC_MVP.html" rel="alternate" type="text/html" title="MVC MVP" /><published>2023-03-10T00:00:00-07:00</published><updated>2023-03-10T00:00:00-07:00</updated><id>http://localhost:4000/2023/03/10/MVC_MVP</id><content type="html" xml:base="http://localhost:4000/2023/03/10/MVC_MVP.html"><![CDATA[<h2 id="understanding-mvc">Understanding MVC</h2>

<p>I was introduced to MVC pattern during the beginning of Turing, a 7-months online, computer programming course, while the focus was to write everything only in vanilla JavaScript. MVC is an acronym for Model View Controller where, Model represents the business logic or what makes the application, View is what user interact with and Controller is the bridge between the Model and View.</p>

<p>In addition to MVC pattern, I also employed Repository pattern for managing data within Model.A Repository mediates between the domain and data mapping layers, acting like an in-memory domain object collection. In my case, I use a class instance to construct a data object and repository to store a compilation of data.</p>

<p><a href="https://mermaid.live/edit#pako:eNpFjL0KwzAMhF_FaE5ewJQObddO_Zm0CFtpArZcFJlQQt69Dh26HN9xx7dCKJHBw5DKEkZSc_cTymNmdX1_dM-JF5Q93WHv5yKmJSVWlD__tmszJRToILNmmmLTrijOIdjImRF8w8gD1WQIKFu7UrVy-0gAb1q5g_qOZHyZ6KWUwQ-UZt6-QP04nA"><img src="https://mermaid.ink/img/pako:eNpFjL0KwzAMhF_FaE5ewJQObddO_Zm0CFtpArZcFJlQQt69Dh26HN9xx7dCKJHBw5DKEkZSc_cTymNmdX1_dM-JF5Q93WHv5yKmJSVWlD__tmszJRToILNmmmLTrijOIdjImRF8w8gD1WQIKFu7UrVy-0gAb1q5g_qOZHyZ6KWUwQ-UZt6-QP04nA?type=png" alt="" /></a></p>

<h2 id="how-i-use-mvc-in-my-project">How I use MVC in my project</h2>

<p>I used the MVC pattern while building a trip-booking application called Travel Tracker. I found that because the Model returns the data, it allows the same component to be reused. This concept makes the code modular, which means the modification of a function doesn’t affect the entire model, since the model doesn’t depend on the views. The approach also limits the amount of code duplication since the View is separated from the data and business logic.</p>

<p>On top of the MVC pattern, I also employed the Repository pattern for managing data within the Model. A repository mediates between the domain and data mapping layers, acting like an in-memory domain object collection. In my case, I use a class instance to construct a data object and repository to store a compilation of data. Using the repository pattern separates data access from business logic. Some of the benefits are centralization of the data access logic makes code easier to maintain. This approach allows business and data access logic to be tested separately, help reduce duplication of code, and lowers the chance of making programming errors.</p>

<p><a href="https://mermaid.live/edit#pako:eNplUUFOwzAQ_Iq1J5BaHhBVSEAvHJAQrTjtxThbYuTYkb2mQlX_ju3ESRAnz45ndkb2BZRrCRo4GXdWnfQsjo9o3zWdbxDyIRCtCMrrge--AsKt2G239-LJWfbOGPJJtwxFreZxdKBdCYr74fX5P_mSmhi0IX58ejl0dT6m6PBGg0tBGYuMSw7Xm6lYXpIVK8_EyW8am1YolJEhlC2Vql3_evcUWE_pBS_x81V1zsTitJK1s9U7TqvsFVuXkG1hAz35Xuo2fcwlyQQCd9QTQpNgSycZDSOgvSapjOwOP1ZBwz7SBuLQSqa9lukV-5G8_gL6Takk"><img src="https://mermaid.ink/img/pako:eNplUUFOwzAQ_Iq1J5BaHhBVSEAvHJAQrTjtxThbYuTYkb2mQlX_ju3ESRAnz45ndkb2BZRrCRo4GXdWnfQsjo9o3zWdbxDyIRCtCMrrge--AsKt2G239-LJWfbOGPJJtwxFreZxdKBdCYr74fX5P_mSmhi0IX58ejl0dT6m6PBGg0tBGYuMSw7Xm6lYXpIVK8_EyW8am1YolJEhlC2Vql3_evcUWE_pBS_x81V1zsTitJK1s9U7TqvsFVuXkG1hAz35Xuo2fcwlyQQCd9QTQpNgSycZDSOgvSapjOwOP1ZBwz7SBuLQSqa9lukV-5G8_gL6Takk?type=png" alt="example" /></a></p>

<h2 id="challenges-and-success">Challenges and Success</h2>

<p>Before being introduced to the MVC, my DOM elements doesn’t separate from my data model functions. With a prior frame of thought, I had to refactor many of the codes to fit with the MVC pattern. For example, I wrote a function in the controller file using DOM elements. What I should have done is write a function in the View file to call a controller function that returns value to manipulate DOM elements.
Another challenge is to be comfortable with having many small files. Having a small amount of code in many files created a clear structure that makes it easier to navigate. This also minimized the chance of accidentally changing other codes unintentionally.
My win for this implementation is I have a better sense of focusing on the purpose of the function and concept of single responsibility.</p>]]></content><author><name>Patt Sookmark</name></author><summary type="html"><![CDATA[Understanding MVC]]></summary></entry></feed>