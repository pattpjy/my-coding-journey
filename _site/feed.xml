
<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-03-16T09:55:37-06:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">My Coding Journey Blog</title><author><name>Patt Sookmark</name></author><entry><title type="html">MVC MVP</title><link href="http://localhost:4000/2023/03/10/MVC_MVP.html" rel="alternate" type="text/html" title="MVC MVP" /><published>2023-03-10T00:00:00-07:00</published><updated>2023-03-10T00:00:00-07:00</updated><id>http://localhost:4000/2023/03/10/MVC_MVP</id><content type="html" xml:base="http://localhost:4000/2023/03/10/MVC_MVP.html"><![CDATA[<h2 id="understanding-mvc">Understanding MVC</h2>


<p>I was introduce to MVC pattern during the beginning of Turing, while the focus was to write everything only in vanilla javascript. MVC is an acronym for Model View Controller where, Model represents the business logic or what make the application, View is what user interact with and Controller is the bridge between the Model and View.</p>

<p>On top of MVC pattern, I also employed Repository pattern for managing data within Model.A Repository mediates between the domain and data mapping layers, acting like an in-memory domain object collection. In my case, I use class instance to construct a data object and repository to store a compilation of data.</p>

<p><a href="https://mermaid.live/edit#pako:eNpFjL0KwzAMhF_FaE5ewJQObddO_Zm0CFtpArZcFJlQQt69Dh26HN9xx7dCKJHBw5DKEkZSc_cTymNmdX1_dM-JF5Q93WHv5yKmJSVWlD__tmszJRToILNmmmLTrijOIdjImRF8w8gD1WQIKFu7UrVy-0gAb1q5g_qOZHyZ6KWUwQ-UZt6-QP04nA"><img src="https://mermaid.ink/img/pako:eNpFjL0KwzAMhF_FaE5ewJQObddO_Zm0CFtpArZcFJlQQt69Dh26HN9xx7dCKJHBw5DKEkZSc_cTymNmdX1_dM-JF5Q93WHv5yKmJSVWlD__tmszJRToILNmmmLTrijOIdjImRF8w8gD1WQIKFu7UrVy-0gAb1q5g_qOZHyZ6KWUwQ-UZt6-QP04nA?type=png" alt="" /></a></p>

<h2 id="how-i-use-mvc-in-my-project">How I use MVC in my project</h2>

<p>I used the MVC pattern while building a trip-booking application called Travel tracker. I found that because the Model returns the data, it allows the same component to be reused. This concept makes the code modular, which means the modification of a function doesn’t affect the entire model, since the model doesn’t depend on the views. The approach also limits the amount of code duplication since the View is separated from the data and business logic.
On top of the MVC pattern, I also employed the Repository pattern for managing data within the Model. A repository mediates between the domain and data mapping layers, acting like an in-memory domain object collection. In my case, I use a class instance to construct a data object and repository to store a compilation of data.
Using the repository pattern separates data access from business logic. Some of the benefits are centralization of the data access logic makes code easier to maintain. This approach allows business and data access logic to be tested separately, helps reduce duplication of code, and lowers the chance of making programming errors.</p>

<p><a href="https://mermaid.live/edit#pako:eNplUUFOwzAQ_Iq1J5BaHhBVSEAvHJAQrTjtxThbYuTYkb2mQlX_ju3ESRAnz45ndkb2BZRrCRo4GXdWnfQsjo9o3zWdbxDyIRCtCMrrge--AsKt2G239-LJWfbOGPJJtwxFreZxdKBdCYr74fX5P_mSmhi0IX58ejl0dT6m6PBGg0tBGYuMSw7Xm6lYXpIVK8_EyW8am1YolJEhlC2Vql3_evcUWE_pBS_x81V1zsTitJK1s9U7TqvsFVuXkG1hAz35Xuo2fcwlyQQCd9QTQpNgSycZDSOgvSapjOwOP1ZBwz7SBuLQSqa9lukV-5G8_gL6Takk"><img src="https://mermaid.ink/img/pako:eNplUUFOwzAQ_Iq1J5BaHhBVSEAvHJAQrTjtxThbYuTYkb2mQlX_ju3ESRAnz45ndkb2BZRrCRo4GXdWnfQsjo9o3zWdbxDyIRCtCMrrge--AsKt2G239-LJWfbOGPJJtwxFreZxdKBdCYr74fX5P_mSmhi0IX58ejl0dT6m6PBGg0tBGYuMSw7Xm6lYXpIVK8_EyW8am1YolJEhlC2Vql3_evcUWE_pBS_x81V1zsTitJK1s9U7TqvsFVuXkG1hAz35Xuo2fcwlyQQCd9QTQpNgSycZDSOgvSapjOwOP1ZBwz7SBuLQSqa9lukV-5G8_gL6Takk?type=png" alt="example" /></a></p>

<h2 id="challenges-and-success">Challenges and Success</h2>

<p>Before being introduced to the MVC, my Dom elements doesn’t separate from my data model functions. With a prior frame of thought, I had to refactor many of the codes to fit with the MVC pattern. For example, I wrote a function in the controller file using DOM elements. What I should have done is write a function in the View file to call a controller function that returns value to manipulate DOM elements.
Another challenge is to be comfortable with having many small files. Having a small amount of code in many files created a clear structure that makes it easier to navigate. This also minimized the chance of accidentally changing other codes unintentionally.
My win for this implementation is I have a better sense of focusing on the purpose of the function and concept of single responsibility.</p>]]></content><author><name>Patt Sookmark</name></author><summary type="html"><![CDATA[Understanding MVC]]></summary></entry><entry><title type="html">1st Full Stack Webapp with PERN Stack</title><link href="http://localhost:4000/2023/02/26/pernStack.html" rel="alternate" type="text/html" title="1st Full Stack Webapp with PERN Stack" /><published>2023-02-26T00:00:00-07:00</published><updated>2023-02-26T00:00:00-07:00</updated><id>http://localhost:4000/2023/02/26/pernStack</id><content type="html" xml:base="http://localhost:4000/2023/02/26/pernStack.html"><![CDATA[<p>The team first full stack application journey</p>

<p>My FE team is tasked with creating a simple full stack application. We decided to use PERN stack because our knowledge of Javascript which would covered 3 out of 4 tech in the stack, with combination of these tech allowed us to build a full stack web application with CRUD operations.</p>

<h2 id="why-we-choose-pern-stack">Why we choose PERN Stack</h2>

<p>PERN is an acronym for PostgreSQL, Express, React and Node.
<a href="https://mermaid.live/edit#pako:eNpNTU1LxDAQ_SthTgrd0iRN0w2yh0WvIuhJchnadD9okpKkuGvpfzeriDKHeW_exyzQ-d6AgmH0H90RQyJve-2CwS6V50geNpsdebpMwcSYuXZ_-E7DP0E78pybbhDuf2IvPqZD1rW7DRRgTbB46vO3JduJhnQ01mhQGfZmwHlMGrRbsxXn5F-vrgOVwmwKmKcek3k84SGgBTXgGPN1Qvfuvf01ZQpqgQsoyUveUCmYYFII3vICrqBqVm4lk4wyUefNmVgL-PwuqMqGVU3D2i2tWdVWlK5fdjZYXA"><img src="https://mermaid.ink/img/pako:eNpNTU1LxDAQ_SthTgrd0iRN0w2yh0WvIuhJchnadD9okpKkuGvpfzeriDKHeW_exyzQ-d6AgmH0H90RQyJve-2CwS6V50geNpsdebpMwcSYuXZ_-E7DP0E78pybbhDuf2IvPqZD1rW7DRRgTbB46vO3JduJhnQ01mhQGfZmwHlMGrRbsxXn5F-vrgOVwmwKmKcek3k84SGgBTXgGPN1Qvfuvf01ZQpqgQsoyUveUCmYYFII3vICrqBqVm4lk4wyUefNmVgL-PwuqMqGVU3D2i2tWdVWlK5fdjZYXA?type=png" alt="" /></a></p>

<p>PostgreSQL - It is an Object-Relational Database management system that uses the SQL language combined with many other features that safely store and scale data.</p>

<p>Express - It is a back-end framework for Node.js. used for building web applications and specially APIs. It provides a thin layer of fundamental web application features.Express makes back-end code easier and simpler to write.Creating efficient and robust API is quick and easy.
Allows you to define an error handling middleware.</p>

<p>React - A Front end Framework teaching at Turing. On eo f the requirement for the project is to use react framework. Couples of benefit are Virtual DOM in ReactJS makes user experience better and developer’s work faster. It guarantees stable code.
React allows its components to be reused saving time and effort. Provide the feature of Virtual DOM.</p>

<p>Node.js is Javascript runtime environment for developing server-side and networking applications.</p>

<ul>
  <li>
    <h3 id="how-we-go-about-setting-up-a-workflow">How We go about setting up a workflow</h3>
    <p>We approach our workflow from FE perspective where we consider user story first to design how our data table is going to be. First, we wrote the MVP UI, and create the server using Express. Then, we connect express server to postgres. Once the two framework connect, we seed our mock data to the database and voila. Time to deployed!</p>
  </li>
  <li>
    <h3 id="what-else-we-added-to-out-pern-stack-to-make-it-work">What else we added to out PERN stack to make it work</h3>
    <p>We need Knex to create schema and write query to postgresSQL and we need to add docker compose and also table plus for the ease of interacting with database.</p>
  </li>
  <li>
    <h3 id="what-are-our-blockers-how-did-we-overcome-it">What are our blockers how did we overcome it</h3>
  </li>
  <li>Ops for library than writing code from scratch.
In our UI, we wanted to have a robust filter function that can filter multiple keywords and also has interactive features. As this function evolved, the code got messier and buggier to a point that we decided use a filter library instead. Our reasoning was, we want to get to the core of the project which is building BE and using a library not only save us time but also, creating more stable feature.</li>
  <li>Changing MVP decision
As the deadline approach, we had to trim down our MVP to the most basic feature value and forgo some of the design elements we set up at the beginning to be able to deliver a usable product.</li>
  <li>Asking for help
We were having difficulty with different version of Postgres and the knex documentation that was provided to us. With the help of the Mod4 student, we were also introduce to backend tools, Docker Compose and TablePlus. These tools helps us create Postgres easier and make change to data much more simple.</li>
</ul>]]></content><author><name>Patt Sookmark</name></author><summary type="html"><![CDATA[The team first full stack application journey]]></summary></entry></feed>